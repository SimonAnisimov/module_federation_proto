import {
  add,
  addDays,
  addWeeks,
  addMinutes,
  differenceInCalendarDays,
  differenceInCalendarYears,
  differenceInMinutes,
  differenceInYears,
  eachMinuteOfInterval,
  endOfWeek,
  endOfDay,
  format as dateFnsFormat,
  getDate,
  getDay,
  getHours,
  getMinutes,
  getMonth,
  getWeek,
  getYear,
  isAfter,
  isBefore,
  isDate,
  isEqual,
  isFuture,
  isPast,
  isSameDay,
  isSameWeek,
  parse,
  parseISO,
  roundToNearestMinutes,
  set,
  setDefaultOptions,
  startOfDay,
  startOfWeek,
  sub,
  toDate,
  min,
  max,
  isToday,
  areIntervalsOverlapping,
} from 'date-fns';

export * as config from './config';
export * from './date';
export { getStartAndEndWeekDate } from './get-start-and-end-week-date';
export { toAppDateFormat } from './to-app-date-format';
export * from './conversion-date';

type FormatOptions = Parameters<typeof dateFnsFormat>[2];
const format = (date: Date, format: string, options?: FormatOptions): string => {
  if (!date) return null;

  return dateFnsFormat(date, format, options);
};

export {
  add,
  addDays,
  addWeeks,
  addMinutes,
  differenceInCalendarDays,
  differenceInCalendarYears,
  differenceInMinutes,
  differenceInYears,
  eachMinuteOfInterval,
  endOfWeek,
  endOfDay,
  format,
  getDate,
  getDay,
  getHours,
  getMinutes,
  getMonth,
  getWeek,
  getYear,
  isAfter,
  isBefore,
  isDate,
  isEqual,
  isFuture,
  isPast,
  isSameDay,
  isSameWeek,
  parse,
  parseISO,
  roundToNearestMinutes,
  set,
  setDefaultOptions,
  startOfDay,
  startOfWeek,
  sub,
  toDate,
  min,
  max,
  isToday,
  areIntervalsOverlapping,
};
